package com.jai.BST;

public class MinMaxInBST {
		
	class Node{
		int key;
		Node left,right;
		public Node(int key) {
			super();
			this.key = key;
		}
		
	}
	
	Node root;
	
	public void insert(int key) {
		root=insertRec(root, key);
	}
	private Node insertRec(Node root,int key) {
		//if the tree is empty
		if(root==null) {
			root=new Node(key);
			return root;
		}
		if(key<root.key)
			root.left=insertRec(root.left, key);
		else if(key>root.key)
			root.right=insertRec(root.right, key);
		
		return root;
	}
	
	public void inorderTraversal() {
		inorderRec(root);
	}
	
	//Left,root,right
	private void inorderRec(Node root) {
		if(root!=null) {
			inorderRec(root.left);
			System.out.println(root.key);
			inorderRec(root.right);
		}
	}
	
	 void deleteKey(int key) { root = deleteRec(root, key); }
	
	    Node deleteRec(Node root, int key)
	    {
	        if (root == null)
	            return root;
	        
	        if (key < root.key)
	            root.left = deleteRec(root.left, key);
	        else if (key > root.key)
	            root.right = deleteRec(root.right, key);
	        else {
	            if (root.left == null)
	                return root.right;
	            else if (root.right == null)
	                return root.left;
	 
	            root.key = minValue(root.right);
	            root.right = deleteRec(root.right, root.key);
	        }
	 
	        return root;
	    }
	    
	    int minValue(Node root)
	    {
	        int minv = root.key;
	        while (root.left != null)
	        {
	            minv = root.left.key;
	            root = root.left;
	        }
	        return minv;
	    }
	
	public int highest() {
		Node curr =root;
		while(curr.right!=null)
			curr = curr.right;
		return curr.key;
	}
	public int lowest() {
		Node curr =root;
		while(curr.left!=null)
			curr = curr.left;
		return curr.key;
	}
	
	}


