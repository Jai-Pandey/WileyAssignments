package com.jai.BST;

public class MinMaxInBST {
		
	class Node{
		int key;
		Node left,right;
		public Node(int key) {
			super();
			this.key = key;
		}
		
	}
	
	Node root;
	
	public void insert(int key) {
		root=insertRec(root, key);
	}
	private Node insertRec(Node root,int key) {
		//if the tree is empty
		if(root==null) {
			root=new Node(key);
			return root;
		}
		if(key<root.key)
			root.left=insertRec(root.left, key);
		else if(key>root.key)
			root.right=insertRec(root.right, key);
		
		return root;
	}
	
	public void inorderTraversal() {
		inorderRec(root);
	}
	
	//Left,root,right
	private void inorderRec(Node root) {
		if(root!=null) {
			inorderRec(root.left);
			System.out.println(root.key);
			inorderRec(root.right);
		}
	}
	
	public void delete(int ele) {
		root = deleteNode(root,ele);
	}
	
	private Node deleteNode(Node root,int ele) {
		if(root==null)
		{
			return root;
		}
		else if(root.key>ele)
		{
			root.left = deleteNode(root.left, ele);
		}
		else if(root.key>ele)
		{
			root.right = deleteNode(root.right, ele);
		}
		else
		{
			if(root.left==null&&root.right==null)
            {
                return null;
            }
			else if(root.left==null||root.right==null)
            {
                if(root.left!=null)
                {
                    return root.left;
                }
                else{
                    return root.right;
                }
            }
			root.key = min(root.right);
            root.right = deleteNode(root.right, root.key);
		}
		return root;
	}
	
	public int minTree() {
		return min(root);
	}
	private int min(Node root) {
		if(root.left==null)
			return root.key;
		int temp=min(root.left);
		return temp;
	}
	
	public int highest() {
		Node curr =root;
		while(curr.right!=null)
			curr = curr.right;
		return curr.key;
	}
	public int lowest() {
		Node curr =root;
		while(curr.left!=null)
			curr = curr.left;
		return curr.key;
	}
	
	}


